# Configuration for FaaSLoad (injection and generation modes)

# You can use environment variables and the home "~" shortcuts in paths, they will be expanded (in this order).
# Some settings are mandatory but empty by default.

# Generation mode
# Note that the generation mode uses the injection mode, so you should also check the configuration section about "Injection".
generation:
  # Put the injector in dataset generation mode (i.e., not in injection mode)
  # Default: false (injection mode)
  enabled:
  # Default random seed used when starting generation from scratch
  # Default: 19940503
  seed:
  # Directory where generator state files are stored to, and loaded from. The directory must exist.
  # Default: "~/faasload/states"
  statedir:
  # Time (seconds) between two invocations of the same function
  # Default: 60
  interinvocationtime:
  # Number of inputs per input kind (a function will be invoked once with each input of its kind, starting with input #1
  # and up to the specified number)
  # nbinputs should be a dictionary mapping input kinds to number of inputs
  # Defaults: empty; MANDATORY (if generation mode is enabled)
  nbinputs:

# Database
# FaaSLoad connects to a local MySQL server.
database:
  # Connect to the database server with this user
  # Default: faasload
  user:
  # Connect to the database server with this password
  # Default: "" (no password)
  password:
  # Use this database
  # Default: faasload
  database:

# OpenWhisk
openwhisk:
  # OpenWhisk home directory
  # Default: "~/openwhisk"
  home:
  # Whether to check the certificate of the API gateway
  # It is usually broken for an Ansible installation on localhost so keep it disabled.
  # Default: true (certificate checking disabled)
  disablecert:
  # Directory of supplementary authorization keys: each filename in this directory matches a namespace, and its content
  # will be read as the authorization key. Leave empty to not read any supplementary authorization keys.
  # Default: empty (no supplementary keys are read)
  authkeys:
  # Address and port (probably 9093) of OpenWhisk's Kafka container, used to get notifications of action executions
  # Default: empty; MANDATORY
  kafkahost:

# Monitor of Docker containers
# The monitor's configuration is in the dedicated configuration file "monitor.yml"; this section is FaaSLoad's configuration about the monitor.
dockermonitor:
  # Whether execution monitoring is enabled. If disabled, FaaSLoad will not store memory and CPU usage.
  # This does not control the monitor itself, it only prevents FaaSLoad from using it
  # Default: true
  enabled:
  # Path to the UNIX socket to requests measurements from the monitor of OpenWhisk's Dockers
  # Default: "/run/wdm/meas"
  measurementsock:

# Injection
# This section include general configuration for the injection (i.e, that also concerns the generation mode), as well as configuration dedicated to the injection mode.
injection:
  # Directory where injection trace files are read from
  # Default: "~/faasload/injection-traces"
  tracedir:
  # Fetching logs of failed actions (always supply both timeout and backofftime, or remove fetchlogs)
  fetchlogs:
    # Maximum time (seconds) to wait for the logs to become available in OpenWhisk
    # Default: 5
    timeout:
    # Back off time (seconds) between tries to fetch the logs
    # Default: 0.5
    backofftime:

# Logging
# This section is directly passed to Python's logging module.
# More info here: https://docs.python.org/3/library/logging.html#module-logging
logging:
  # Fixed field required by Python logging module
  version: 1
  # Customize the root handler (by default, only improves the logging format by defining a new "root" handler)
  root:
    # Global logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL, NOTSET
    level: INFO
    handlers: [ root ]
  # Logger customization
  # More loggers are used, and by default they inherit from the root logger.
  # Other loggers: main, functionloader, injection (main entrypoint of the injection), activationmon (activation monitor that fetches information about injected activations)
  loggers:
    # Sub-logger for the injector threads (used in both generation and injection modes)
    injector:
      handlers: [ injector ]
      propagate: false
  handlers:
    root:
      class: logging.StreamHandler
      formatter: root
    injector:
      class: logging.StreamHandler
      formatter: injector
  formatters:
    root:
      format: "[%(asctime)s][%(levelname)s][%(name)s] %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    # The logger for the injector component displays the injector's thread name, which includes user name and function being injected
    injector:
      format: "[%(asctime)s][%(levelname)s][%(name)s][%(threadName)s] %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
